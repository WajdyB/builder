// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  thumbnail   String?
  status      Status   @default(DRAFT)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pages       Page[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Page {
  id         String      @id @default(cuid())
  name       String
  slug       String
  isHomePage Boolean     @default(false)
  projectId  String
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  components Component[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([projectId, slug])
  @@index([projectId])
}

model Component {
  id         String          @id @default(cuid())
  type       String
  properties Json
  x          Float
  y          Float
  width      String
  height     String
  zIndex     Int     @default(0)
  pageId     String
  page       Page            @relation(fields: [pageId], references: [id], onDelete: Cascade)
  parentId   String?
  parent     Component?      @relation("ComponentChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children   Component[]     @relation("ComponentChildren")
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@index([pageId])
  @@index([parentId])
}


enum Status {
  DRAFT
  PUBLISHED
}
